<div class="hamster-container">
  <svg class="spring" viewBox="0 0 103.34 230.13" width="182px" height="405px">
    <path
      d="M63.46 1.68c-0.83,0 1.62,36 -1.11,36.09 -16.85,0.55 -63.15,3.34 -56.24,14.73 7.83,12.92 68.65,15.55 82.47,12.74 50.23,-10.24 -97.02,-13.85 -67.41,10.55 5.95,4.9 24.43,6.47 33.55,7.82 52.9,7.86 43.51,-6.58 28.99,-8.57 -28.62,-3.91 -83.35,-6.42 -56.87,20.06 9.2,9.2 46.41,10.63 58.18,3.66 10.9,-6.45 -36.66,-7.44 -49.38,-0.82 -5.7,2.96 -17.08,9.54 -7.71,15.09 8.93,5.28 39.86,10.84 51.1,6.94 42.37,-14.67 -99.98,-12.16 -42.65,13.57 6.92,3.1 51.18,13.25 51.18,0.57 0,-6.92 -49.65,-1.23 -55.45,0.9 -8.39,3.08 -14.48,11.43 -4.05,16.58 14.92,7.35 49.12,12.84 64.01,5.08 17.59,-9.17 -39.56,-7.14 -39.97,-7.11 -8.85,0.69 -33.85,-0.49 -35.44,12.44 -2.2,17.94 79.23,16.78 82.8,13.57 16.76,-15.12 -67.39,-8.48 -74.86,-6.98 -60.43,12.11 15.63,24.5 33.68,23.92 0.05,0 -0.35,29.39 -0.43,37.6"
      stroke="#2B2A29"
      stroke-width="3.35"
      stroke-miterlimit="22.9256"
      fill="none"></path>
  </svg>

  <svg viewBox="0 0 177.1 117.8" class="hamtafor" width="182px" height="117.8px">
    <path
      d="M55.8 40.2C43.1 27 31 27.7 19.5 49.2c-3.4 12.3-3 21.6 3.4 26l-6 18.5c5.5-3.6 16 11.2 12.4 21.7 2.6-.1 4.9 1.4 11-2a75 75 0 0 0 43.6-.3c4.3 1.5 6 3 10.8 2.5-1.8-8.8 4.1-23.5 12.6-22.4.4-4.6-1.6-10.4-6.4-17.7 5-4 7-9.4 6.1-16L97.7 54c-14-4.6-36.5-8.5-41.9-13.9z"
      class="body"></path>
    <path
      d="m20.4 41-.9 8.2c11.4-19.3 23-23.2 36.3-9 0 0 3.5 4.9 29 9.5a62.3 62.3 0 0 1 22.2 9.8l-3.9-18.7c42.4-.5 10.8-65.8-16.5-27.6A67.5 67.5 0 0 0 38.4 12C12.8-22.7-20.9 35.7 20.4 41z"
      class="head"></path>
    <path
      d="M21.3 40.9c-7.6-.8-13-4-17-9.6-4.6-10 5.1-16.9 14.6-13.1 5.5 3.5 8.3 7.3 9.3 11.4.3 1.3-3.7-.7-5.5-1 .3 1.5 1.6 2.7 2.4 4L21.3 41zM103.3 41c7.6-.7 13-4 17.1-9.5 4.5-10-5.2-16.9-14.7-13.1-5.5 3.5-8.3 7.3-9.2 11.4-.3 1.4 3.6-.7 5.4-1-.3 1.5-1.6 2.7-2.4 4l3.8 8.3z"
      class="hear"></path>
    <ellipse cx="40" cy="50.4" class="eye" rx="11.2" ry="12.3"></ellipse>
    <ellipse cx="85.3" cy="50.3" class="eye" rx="11.2" ry="12.3"></ellipse>
    <circle cx="42.9" cy="46.5" r="3.9" class="eyeSparkle"></circle>
    <circle cx="82.7" cy="46.5" r="3.9" class="eyeSparkle"></circle>
    <circle cx="89.7" cy="57.4" r="1.5" class="eyeSparkle"></circle>
    <circle cx="36.1" cy="57.2" r="1.6" class="eyeSparkle"></circle>
    <path
      d="M62.3 61.9c2.5.4 6.4-4 2-5.6l-3.7-.1c-3 .8-1.7 5.3 1.7 5.7z"
      class="nose"></path>
    <path
      d="M50.9 66a.8.8 0 0 1 0-1.2c.4-.2.9-.2 1.1.1L51 66zm12.3-.7-1 1.1h1l-.3.4-.4.4-.4.3-.3.4-.4.3-.4.3-.4.2-.4.2-.4.2-.4.2-.3.2h-.4l-.5.2h-2l-.4-.2-.4-.1-.4-.2-.4-.1-.3-.2-.4-.3-.4-.2-.4-.3-.4-.3-.3-.3-.4-.4-.4-.4-.3-.4-.4-.4 1.1-1 .4.4.3.4.3.3.4.4.3.2.3.3.4.3.3.2.3.2.3.1.3.2h.3l.3.2h.6l.3.1H58l.3-.1h.3l.3-.2.3-.1.3-.2.3-.2.4-.2.3-.2.3-.3.3-.3.3-.3.4-.3.3-.4h1.1zm-1 .1a.7.7 0 1 1 1 1l-1-1zm11.3-.5 1.2 1-.3.4-.4.4-.3.3-.4.4-.3.3-.4.3-.3.3-.4.2-.4.2-.3.2-.4.2-.4.1-.4.1-.4.1-.4.1H67.5l-.4-.1-.4-.1-.4-.1-.4-.2-.4-.2-.4-.2-.5-.2-.4-.3-.4-.3-.4-.3-.4-.3-.4-.4-.4-.4 1-1 .4.3.4.3.3.3.4.3.4.3.3.2.4.2.3.2.4.1.3.1.3.1.3.1h.4l.3.1h1.2l.3-.1h.3l.3-.2.3-.1.3-.2.3-.2.3-.2.3-.2.3-.2.3-.3.3-.3.3-.3.3-.4.3-.4zm0 0a.8.8 0 0 1 1.2 1l-1.2-1z"
      class="mouth"></path>
    <path
      d="M29.1 63c-5.9-1.7-11.8-2-17.7-.9M29.6 67.6a32 32 0 0 0-15.7 3.9M95.8 63.5c6-1.7 11.9-2 17.8-1M95.4 68.1c5.2-.2 10.4 1.2 15.6 3.9M86 83.8c-16.2 8-12 25.3 8.7 11M76.4 97.4l4.2-2.9M79.4 100l3.5-2.2M38.5 83.5c16.2 8 12 25.3-8.7 11M48.1 97.1l-4.2-2.9M45.1 99.7l-3.5-2.2"
      class="hand"></path>
    <path
      d="m107 59.5-3.9-18.7c42.4-.5 10.8-65.8-16.5-27.6A67.5 67.5 0 0 0 38.4 12C12.8-22.7-20.9 35.7 20.4 41"
      class="backHead"></path>
    <path
      d="M107 59.5c1 6.7-1.1 12-6.1 16 4.8 7.3 6.8 13 6.4 17.7-8.5-1.1-14.4 13.6-12.6 22.4-4.8.4-6.5-1-10.8-2.4a75 75 0 0 1-43.6.2c-6.1 3.4-8.4 1.9-11 2C32.8 104.9 22.4 90 17 93.7l5.9-18.4c-6.4-4.5-6.8-13.8-3.4-26.1l1.9-9"
      class="backBody"></path>
    <path
      d="M27.9 116.2c5.8-2.2-1.2-27.5-12.4-22.6-8.2 8.4 7.8 26.6 12.4 22.6z"
      class="foot"></path>
    <path d="M19 99.7c-1.8-3.2-2.3-5.4-1.8-6.6" class="toe"></path>
    <path
      d="M96.5 116.2c-5.7-2.3 1.2-27.6 12.4-22.7 8.3 8.4-7.7 26.6-12.4 22.6z"
      class="foot"></path>
    <path d="M105.5 99.7c1.8-3.3 2.3-5.4 1.8-6.7" class="toe"></path>
    <path d="M107.4 36 84.3 83.8" class="flagpole"></path>
    <path
      d="M118 13.5 98.9 53.6c8.3-2.3 11.7.3 16 2 16.8 6.6 25.7 12 35.7 40.3L175.8 62c-5.3-6.8-14.9-9.6-17.8-22.2-5.2-12.4-19.8-23.8-30.3-24.4-3.1-.3-5.9-.6-9.6-2z"
      class="flag"></path>
    <path
      d="M147.8 36c1.6.6 2 .7 4-.6-.9 2-.6 3.5.2 4.4-1-.5-2.2-.3-3.5.7.4-1.6.2-3-.7-4.5z"
      class="logo"></path>
    <path
      d="M143.3 47 139 60.3c-.2 1.5.1 2.8.7 4 .4.7.8 1 1.4 1.2.3.2.6 0 .9-.4l6-18.4c.7-4.7-1.5-6-6-4l-16.2 11c-.7.8-.1 1.3.4 1.7 2.7 1.7 7.8-1 16-7.9.2-.2 1-.5 1.2-.3z"
      class="logo"></path>
    <path
      d="M127 47.8c-1.6.4 10.3 10.8 12.9 4l-9.2-5.9c-2.3.4-3.6 1-3.8 2z"
      class="logo"></path>
  </svg>
</div>

<style>
  .hamster-container {
    position: relative;
    display: flex;
    justify-content: center;
    width: 270px;
    transform-origin: top center;
    transform: scale(0.8);
    top: -10px;
    z-index: 2;
  }

  .spring {
    position: absolute;
    display: block;
    width: 100%;
    height: 250px;
    transform-origin: top center;
  }

  .hamtafor {
    position: absolute;
    width: 50%;
    cursor: grab;
    transform: translateY(205px) translateX(25px);
    user-select: none;
  }

  .hamtafor * {
    stroke: #2b2a29;
  }

  .backHead,
  .backBody,
  .foot,
  .flag,
  .hand,
  .hear,
  .flagpole {
    stroke-width: 2;
    stroke-linecap: round;
  }

  .head,
  .body {
    stroke-width: 0;
  }

  .logo {
    stroke-linejoin: round;
  }

  .hand,
  .backHead,
  .backBody,
  .flagpole {
    fill: none;
  }

  .eye,
  .nose,
  .mouth {
    fill: #2b2a29;
  }

  .flag {
    fill: #d600ff;
  }

  .head {
    fill: #fb973d;
  }

  .hear,
  .foot {
    fill: #fdc3b2;
  }

  .body,
  .eyeSparkle,
  .logo {
    fill: #fefefe;
  }
</style>

<script>
  const hamtafor = document.querySelector(".hamtafor");
  const spring = document.querySelector(".spring");

  let dragging = false;
  let startY = 0;
  let baseY = 205;
  let baseX = 25;
  let currentY = baseY;
  let deltaY = 0;

  function startDrag(y) {
    dragging = true;
    startY = y;
    hamtafor.style.cursor = "grabbing";
  }

  function moveDrag(y) {
    if (!dragging) return;

    deltaY = y - startY;
    currentY = baseY + deltaY;

    if (currentY < 100) currentY = 100;
    if (currentY > 400) currentY = 400;

    hamtafor.style.transform = `translateY(${currentY}px) translateX(${baseX}px)`;

    const limitedDelta = currentY - baseY;

    const stretch =
        limitedDelta >= 0
            ? 1 + limitedDelta / 200
            : 1 / (1 - limitedDelta / 200);

    spring.style.transform = `scaleY(${stretch})`;
  }

  function endDrag() {
    if (!dragging) return;

    dragging = false;
    hamtafor.style.cursor = "grab";

    const limitedDelta = currentY - baseY;

    if (Math.abs(limitedDelta) <= 3) {
      hamtafor.style.transform = `translate(${baseX}px, ${baseY}px)`;
      spring.style.transform = "scaleY(1)";
      return;
    }

    const stretch =
        limitedDelta >= 0
            ? 1 + limitedDelta / 200
            : 1 / (1 - limitedDelta / 200);

    const bounce = hamtafor.animate(
      [
        {
          transform: `translateY(${currentY}px) translateX(${baseX}px)`,
        },
        {
          transform: `translateY(${baseY - limitedDelta * 0.2}px) translateX(${baseX}px)`,
        },
        {
          transform: `translateY(${baseY + limitedDelta * 0.1}px) translateX(${baseX}px)`,
        },
        { transform: `translateY(${baseY}px) translateX(${baseX}px)` },
      ],
      {
        duration: 600,
        easing: "ease-out",
      },
    );

    spring.animate(
      [
        { transform: `scaleY(${stretch})` },
        { transform: `scaleY(${limitedDelta >= 0 ? 0.9 : 1.1})` },
        { transform: `scaleY(${limitedDelta >= 0 ? 1.05 : 0.95})` },
        { transform: "scaleY(1)" },
      ],
      {
        duration: 600,
        easing: "ease-out",
      },
    );

    bounce.addEventListener("finish", () => {
      hamtafor.style.transform = `translate(${baseX}px, ${baseY}px)`;
      spring.style.transform = "scaleY(1)";
      currentY = baseY;
    });
  }

  hamtafor.addEventListener("mousedown", (e) => startDrag(e.clientY));
  window.addEventListener("mousemove", (e) => moveDrag(e.clientY));
  window.addEventListener("mouseup", endDrag);

  hamtafor.addEventListener("touchstart", (e) => {
    const touch = e.touches[0];
    startDrag(touch.clientY);
  });

  window.addEventListener("touchmove", (e) => {
    const touch = e.touches[0];
    moveDrag(touch.clientY);
  });

  window.addEventListener("touchend", endDrag);

  hamtafor.addEventListener("dragstart", (e) => e.preventDefault());
</script>
